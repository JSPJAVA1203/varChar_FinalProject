[[ 준원 ]]

안녕하세요 차 쇼핑몰 최종 프로젝트를 개발한 팀 Try Catchers입니다.
——> 다음 페이지

발표 순서는 팀원 소개와 중간 프로젝트 소개로 시작하여 프로젝트 개요, 주요 기능, 특장점, 오류 사항, 소감 순으로 진행할 예정입니다.
——> 다음 페이지

저희 팀은 팀장: 박준현
팀원: 권지현, 김지훈, 류준원, 정윤구, 탄다미로 이루어져 있으며
다음과 같이 컨트롤 2명, 모델 2명, 뷰 2명으로 파트 분배를 하였습니다.

각 팀원이 기능 단위로 발표를 진행하겠습니다.
지금 발표를 시작하는 저는 류준원이며 개요도 함께 맡아 발표할 것입니다.
또한 오류원인 및 해결과 특장점 파트는 팀장인 박준현 팀원이 발표할 예정입니다.
전체적으로 중간 프로젝트에서 추가되거나 발전된 내용 중심으로 발표를 구성하였습니다.
——> 다음 페이지

저희는 varchar라는 프로젝트를 2번에 나눠서 준비하였습니다. 
중간 프로젝트에서 저희 핵심 기능은 회원가입 및 로그인, 상품 위시리스트, 장바구니, 결제, 후기 작성 및 수정, 다시 담기 기능을 구현하였습니다.
최종 프로젝트에서는 중간 프로젝트에서의 기능을 보완하고, 템플릿, DB 이관 작업을 진행하면서 해시태그 및 관리자 기능을 추가하여 구현하였습니다.
들어가기에 앞서 중간 프로젝트에서 구현한 기능을 시연하면서 보여드리겠습니다.
——> 시연 ㄱㄱ

먼저, 로그인을 해보겠습니다.
상단의 티 제품을 클릭하여 상품 목록에 들어가 보겠습니다.
뱅 드 로즈티 상품을 찜 추가 해보겠습니다.
찜 추가가 완료되면 우측 상단에 스윗 알럿으로 추가가 되는 것을 확인할 수 있습니다.
이번엔 블랙 차이 상품을 클릭해서 해당 상품의 상세 내용을 보겠습니다.
수량을 3개로 변경해서 장바구니에 추가 해보겠습니다. 
추가를 하게 되면 장바구니 페이지로 이동하게 되고, 상품의 정보가 출력되는 것을 확인할 수 있습니다.
이제 장바구니에 담긴 상품을 결제 해보겠습니다. 
(결제 창이 뜨면) 저희는 토스 페이 API를 사용하여 결제 기능을 구현했습니다.
결제 해보도록 하겠습니다.
결제가 완료되면 결제 완료 페이지로 이동하게 됩니다.
다시 주문내역 페이지로 이동해보겠습니다.
여기서 구매한 상품의 후기를 작성해보도록 하겠습니다.
후기 작성이 완료되면 후기 목록 페이지로 이동하게 되고 방금 등록한 후기가 출력되는 것을 확인할 수 있습니다.
다시 주문내역 페이지로 이동해보겠습니다.
우측에 다시 담기 버튼을 볼 수 있습니다.
다시 담기 버튼을 클릭하게 되면 주문한 내역을 동일하게 장바구니에 담기는 것을 확인할 수 있습니다.
이상으로 중간 프로젝트에서 구현한 기능 시연을 마치도록 하겠습니다.
——> 다음 페이지

[개발론]
프로젝트 설명을 드리기 전에 개발론을 말씀드리겠습니다. 
저희 최종 프로젝트에서는 더욱 더 효율적인 개발을 위하여 개발방법론을 사용하였습니다. 
애자일 방법론 중 스프린트 방식을 채택하였습니다.
——> 다음 페이지

통합 방법은 패키징 단위로 팀원끼리 개발을 진행하였으며 연쇄식 통합 방식으로 진행되었습니다.
——> 다음 페이지

테스트로는 화이트박스와 블랙박스 방식 모두 테스트함으로써 위험 사항을 예방하였습니다.
——> 다음 페이지

[프로젝트 개요]
이제 본격적으로 프로젝트 개요로 넘어가도록 하겠습니다.
저희 프로젝트의 개요는 다음과 같습니다.

먼저 기획 배경은
JAVA와 JSP, Spring 프레임워크를 적용한 MySQL/Oracle 기반의 MVC 패턴을 이용한 차 구매 웹페이지를 구현하는 것입니다
기대효과로는
   전반적인 JAVA, JSP, Spring, MySQL/Oracle에 대한 심층적 이해 및 활용도 향상
   JSP를 이용한 동적 웹사이트 구축 및 학습 극대화
   MVC / JDBCTemplate 등 디자인패턴 학습 및 적용
   기존의 JSP 프로젝트를 Spring 프레임워크 방식으로 이관
   깃(Git)을 통한 팀원들의 업데이트 사항 실시간 반영 및 수정 용이 
5가지 항목이 있습니다

기능은 간략히 말씀드리자면
첫번째로 차 상품 관련 장바구니 및 구매, 찜, 후기 기능
두번째로 회원관련인 회원가입, 회원정보 수정 기능
세번째로 최종 프로젝트에서 추가된 상품 관리 기능, 해시태그 기능 등이 있습니다
——> 다음 페이지

또한 개발환경으로는 Spring(STS3)을 사용하였고 DBMS로는 기존 MySQL에서 Oracle로 이관하였습니다
——> 다음 페이지

개발 과정에 있어 디스코드, 깃, 노션 등과 같은 협업툴로 일정관리 및 코드 파일 등을 관리하였습니다
——> 다음 페이지

[구조도]
다음으로는 프로젝트의 구조입니다

먼저 FlowChart 입니다. 
사용자에 관한 내용은 기존 내용과 유사하며
——> 다음 페이지
관리자 기능 중심으로 추가되었습니다

Logic Process 입니다.
저희 프로젝트의 중심 기능인 
장바구니부터 결제까지의 로직과
새롭게 추가된 해시태그와 이미지 업로드가 모두 반영된 후기 작성 로직 프로세스입니다

후기 작성시 사용자는 최대 3개의 해시태그를 후기에 등록할 수 있으며
이미지는 최대 10장 까지 등록이 가능합니다
각 정보는 정규화를 통하여 나누어진 테이블에 저장되게 됩니다
——> 다음 페이지

다음은 ERD 입니다. ERD에서는 저희 핵심 기능인 해시태그를 중점적으로 설명드리겠습니다.
해시태그 기능은 상품 테이블과 후기 테이블 두 개의 테이블에서 사용됩니다. 
이를 위해 해시태그 상세 테이블을 도입하여, 1000번대의 해시태그는 상품 관련 해시태그로,
2000번대 해시태그는 후기 관련 해시태그로 구분하여 관리하였습니다.
각각의 해시태그는 해당 기능에서 사용될 수 있도록 해시태그 상세 테이블에 ITEM_NUM 칼럼을 추가하여 관리하였습니다.
이러한 분리된 구조를 통해 데이터 재사용성을 높일 수 있습니다. 예를 들어, 사용자가 특정 상품을 찾고자 할 때 
해당 상품의 해시태그를 클릭하면 관련된 다른 상품들도 함께 보여줄 수 있습니다.
마찬가지로, 사용자가 특정한 후기를 찾고자 할 때 해당 후기의 해시태그를 클릭하면 관련된 다른 후기들을 확인할 수 있습니다.
또한, 각각의 테이블은 필요한 컬럼만 가지고 있어 데이터 크기를 최소화하고 쿼리 성능을 개선할 수 있습니다.
데이터 일관성과 정확성을 보장하기 위해 각 해시태그 내용에는 UNIQUE KEY 제약조건 설정으로 
중복 데이터가 발생하지 않도록 하였습니다. 이를 통해 데이터 일관성과 정확성을 유지할 수 있습니다.
——> 다음 페이지

다음은 후기 해시태그 관련 기능입니다.
후기 해시태그에서는 이벤트 스케줄러 기능을 사용하였는대요.
해당 기능은 해시태그 상세 테이블에서 후기 해시태그 번호가 존재하지 않는 경우,
사용 되지 않는 것으로 인식하여 삭제하는 로직으로 구현하였습니다.
또한, 이벤트 스케줄러는 일주일마다 한 번씩 실행 되며, 매주 월요일 자정에 동작하도록 설정하였습니다.
——> 다음 페이지

해당 해시태그가 후기에서 사용 되지 않는 경우 삭제 되는 모습을 볼 수 있습니다.
——> 다음 페이지

다음은 상품 해시태그 관련 기능입니다.
상품 해시태그에서는 트리거 기능을 사용하였는대요. 
기능의 내용은 후기 해시태그와 동일하지만 이벤트 수행 지점이 다르다는 점이 있습니다.
상품 해시태그 삭제의 수행 지점은 INSERT 요청이 들어왔을 경우 INSERT 수행 전에 트리거가 먼저 실행되도록 설정하였습니다.
——> 다음 페이지

해당 해시태그의 ITEM_NUM 이 NULL 로 출력되는 경우, 위의 이벤트 스케줄러와 마찬가지로 사용하고 있지 않은 해시태그로 인식하여
다음 해시태그 INSERT 가 수행되기 전에 해당 해시태그 삭제 후 다음 해시태그가 INSERT 되는 모습을 확인할 수 있습니다. 

이어서 sns로그인 기능에 대해서 발표하겠습니다.

================================================================================================================================================================================================================================================================================================
[[ 지훈 ]]

저는 sns로그인중 구글로그인api 발표를 맡게된 김지훈입니다.
//
✔1페이지
먼저 구글 로그인API를 사용하기 위해 구글에서 제공하는 자바스크립트 라이브러리를 추가해주었습니다.
이 라이브러리를 통해 발급받은 클라이언트 아이디를 입력하여 구글 로그인 버튼을 사용할 수 있게 되었습니다.
로그인 결과를 처리하기 위해 핸들크레덴셜리스폰스 함수를 활용하였습니다.
이 함수는 구글 로그인 API에서 제공하는 기능으로, 로그인 결과를 처리하는 역할을 담당합니다.
기존에 API에서 자동으로 생성되는 버튼 대신 직접 만든 반응형 버튼을 활용하기 위해 "btn"요소를 가진 버튼을 클릭하면,
동시에 "nsm"요소를 가진 버튼도 클릭되도록 트리거 함수를 사용하였습니다.
이렇게 함으로써 구글 로그인API와 자체적으로 디자인한 반응형 버튼을 결합하여 보다 유연하고 맞춤화된 서비스를 제공할 수 있게 되었습니다.

//

✔2페이지
앞서 언급한 트리거 함수가 작동하게 되면 버튼이 클릭되고 핸들러 함수가 작동합니다.
핸들러 함수는 구글 로그인 후 사용자의 정보를 가져오는 역할을 수행합니다.
이때, Response에 사용자 정보들이 암호화된 상태로 담겨있습니다.
암호화된 정보를 해독하기 위해 JWT() 함수를 사용하여 복호화 과정을 거치게 됩니다.

//

✔3페이지
복호화된 정보 중에서 필요한 정보들은 param 변수에 저장됩니다.
또한, snsLogin.do요청을 통해 컨트롤러 메서드로 전달하기위해 memberPlatform인자를 통해
SNS로그인 구분을 하게 됩니다.
이렇게 추출된 사용자 정보와 SNS구분값은 snsLogin.do요청으로 전달되어
추가적인 처리 및 로직 수행에 활용됩니다.

//

4페이지
해당 함수는 앞서 말한 JWT함수로 암호화된 사용자의 정보를 복호화하는 함수입니다.

//

5페이지
해당 코드는 snsLogin.do요청 시 실행되는 컨트롤러 메서드 입니다.
이 메서드에서는 사용자의 아이디가 이미 존재하는 회원인지 중복 검사를 진행합니다.
만약 아이디가 존재하지 않는다면, 회원가입 페이지로 이동하게 됩니다.
반대로, 만약 아이디가 이미 존재한다면, 이미 가입한 회원임을 의미하며 해당 회원의 정보를
세션에 담아 로그인 처리합니다.
그리고 메인페이지로 이동하여 로그인된 상태에서 서비스를 이용할 수 있습니다.

//

6페이지
위의 코드는 회원 관련  CRUD중 SELECTONE 에 해당하는 코드입니다.
여러 개의 SELECTONE 쿼리가 존재하기 때문에,
MemberSearch라는 새로운 인자 값을 도입하여 어떤 쿼리를 실행할지 정보를 담았습니다.
현재 우리는 sns 로그인 중 아이디 중복검사를 수행할 것이기 때문에 해당 쿼리가 실행될 것입니다.
이를 통해 아이디의 중복 여부를 확인하고, 중복된 경우 해당 회원의 정보를 반환하며, 중복되지 않은 경우 NULL값을 반환합니다.
이렇게 구현된 코드는 사용자가 입력한 아이디와 기존 회원들의 아이디를 비교하여 중복 여부를 체크함으로써 정확한 가입 절차와 데이터 무결성을 
유지할 수 있습니다.
 
//

7페이지
다음은 저희 프로젝트 내에서 실제로 구현된 SNS로그인 API의 모습입니다.
로그인페이지에서 "구글아이디로 로그인"이라는 버튼을 클릭하게 된다면 계정 선택창이 뜨게 됩니다.
만약 정보가 DB에 존재하지 않는다면 다음과 같은 회원가입 페이지로 이동하도록 구현하였습니다.

//

★코드시연★
이어서 코드시연을 통해 로그인 해보겠습니다.
먼저 화면 상단 로그인 버튼을 누르고 로그인 페이지로 이동해보겠습니다.  (★로그인버튼 눌러줘!!★)
로그인 페이지를 보시면 하단에 다양한 SNS로그인 버튼을 보실 수 있습니다.
그중 '구글아이디로 로그인' 버튼 을 누르게 되면   (★구글아이디로 로그인 버튼 눌러줘★)
계정선택창이 뜨는 것을 볼 수 있습니다.  
계정을 선택해 클릭하게되면 (★김지훈 클릭해줘★)
이미 기존 DB에 회원데이터가 존재하기 때문에 로그인이 성공적으로 실행되고 
상단에 구글아이콘 표시와 "김지훈님 환영합니다" 문구가 뜨는것을 볼 수 있습니다.

이상으로 시연을 마치고 장바구니 모듈화에 대해서 발표하겠습니다.

================================================================================================================================================================================================================================================================================================
[[ 지현 ]]

장바구니 코드 모듈화 부분 발표를 맡게된 권지현입니다
중간 프로젝트 개선사항이었던 장바구니 중복 코드를 리팩토링을 통하여 해결하였습니다

장바구니 기능으로는 
1. 장바구니 추가
2. 장바구니 단건 삭제
3. 장바구니 전체 비우기
4. 장바구니 구매 수량 조절
이렇게 총 4가지가 있습니다

해당 기능들에서 중복되는 코드가 많아 이를 모듈화를 진행하였습니다

모듈화된 메서드는 크게 2가지의 로직으로 이루어져 있습니다

먼저
장바구니에 해당 상품이 있는지 검사하고 
만약 존재한다면 해당 인덱스를 반환하며
존재하지 않는다면 -1을 반환하는 메서드입니다


두번째로
장바구니에 상품을 추가하는 모듈입니다
장바구니 자체의 유무에 따라 나뉘게 되는데

장바구니가 자체가 없다면 즉, null이라면 바로 상품을 추가하고
장바구니에 담긴 상품이 존재한다면 
앞서 언급한 cartCheck() 메서드로
새로 담을 상품이 이미 담겨있는지 확인하게 됩니다

장바구니에 같은 상품이 없을시 해당 상품을 추가하고
장바구니에 같은 상품이 있다면 이미 담겨있는 정보의 재고를 변경합니다

또한 재고 검사 로직을 추가로 구현하였습니다
해당 상품의 보유 재고가 원하는 만큼 있는지 검사하는 메서드로
보유량보다 더 많이 요구할시,  최대값(현재 보유량)으로 설정하며
음수로 입력시, 0으로 설정하도록 구현하였습니다

모듈화된 코드들은 컨트롤러 메서드에서 호출되어 사용하게 됩니다

서비스류등의 행위를 컨트롤러가 아닌 
일반 클래스에서 할 수 없다는 점을 고려하여 
모듈화를 진행하였으며

커맨드객체를 사용할때
new와 set을 기존의 컨트롤러에서 진행해야 
싱글톤 패턴을 유지할 수 있기 때문에 
모듈화된 클래스내에서 사용할 객체를 
컨트롤러에서 생성하여 전달하는 방식으로 
구현해야 한다는 부분을 고려하여 모듈화를 진행하였습니다

//
시연 : +,- 로 수량 조절 / 큰 수를 직접 입력 시 최고 수량으로 수정
//

이어서 비밀번호 찾기 기능에 대해서 발표하겠습니다.

================================================================================================================================================================================================================================================================================================
[[ 다미 ]]

저는 문자 API를 활용한 비밀번호 찾기 기능 발표를 맡은 탄다미입니다.

저희는 네이버 클라우드 플랫폼에서 제공해주는 SENS API를 활용해서 기능을 구현했습니다.
먼저, 네이버 클라우드 플랫폼에서 계정을 생성하고,
SENS API 프로젝트를 생성한 후, 발신번호를 등록합니다.
그리고, SMS 서비스 ID와 개인 인증키, 서비스 시크릿 키를 각각 발급받습니다.

///

SENS API 에서 제공해주는 java 코드를 활용해서,
발급받았던 개인 인증키와 서비스 시크릿 키, 그리고 SMS 서비스 ID 순서대로 코드에 작성합니다.

///

content 변수의 값으로는 문자 발송할 내용을 작성합니다.
저희는 회원 아이디와 생성된 임시 비밀번호를 내용으로 담아 전송하도록 작성했습니다.
입력받을 연락처는 to 변수에 담아주고,
네이버 클라우드 플랫폼에 등록한 발신번호를 from 변수값으로 작성합니다.

///

이 코드는 임시 비밀번호를 발급해주는 메서드인데요,
특정 길이를 인자값으로 넣어주면,
인자값의 길이만큼 영어 대소문자와 숫자 0부터 9까지의 글자를 랜덤으로 조합해 생성해줍니다.

///

저희는 10글자의 랜덤 수를 필요로하기 때문에 길이 값을 10으로 지정한 메서드를 생성했습니다.
이 메서드는 SHA-256 암호화 기능에서도 사용하기 때문에 다른 클래스로 모듈화를 진행했습니다.

///

뷰에서는 폼 태그를 활용해 사용자에게 아이디와 연락처를 입력받고,
임시 비밀번호 받기 버튼을 누르면 문자가 발송될 수 있도록 로직 구현을 했습니다. 

///

컨트롤러에서 뷰를 통해 입력받은 아이디가 데이터베이스에 존재하는 회원인지 여부를 확인한 다음,
존재하는 회원일 경우 임시 비밀번호 생성 메서드를 호출합니다.
생성한 임시 비밀번호는 암호화 진행해준 후에,
암호화된 임시 비밀번호를 해당 아이디의 비밀번호로 변경해줍니다.
비밀번호 변경에 성공할 시, 임시 비밀번호를 문자로 발송해줍니다.

///

위에는 암호화된 임시 비밀번호가 저장된 DB의 결과값이고요,
아래는 발송된 문자 화면입니다.
발송받은 임시 비밀번호를 입력하면, 로그인에 성공하면서 비밀번호 찾기 기능이 마무리됩니다.

//
시연 : 로그아웃 하고, 로그인 창에서 비밀번호 찾기
//

// 코드 시연
그럼 코드시연을 통해서 비밀번호 찾기 기능을 보여드리겠습니다.
먼저 로그인 페이지에 들어가서, 하단에 비밀번호 찾기 버튼을 누르면
비밀번호 찾기 페이지로 넘어갑니다.
이전에 회원가입했던 아이디를 입력하고,
문자를 받을 연락처를 입력한 후에
임시 비밀번호  받기 버튼을 누르면
문자가 발송됩니다.
발급받은 비밀번호로 로그인을 해보겠습니다.
성공적으로 로그인이 되는 것을 확인할 수 있습니다.

이어서 다중 카테고리 기능에 대해서 발표하겠습니다.

================================================================================================================================================================================================================================================================================================
[[ 윤구 ]]

//소개문

관리자 페이지의 다중 카테고리 기능을 맡은 정윤구입니다.

최상단 항목 카테고리 클릭시 해당하는 상품들이 하위 항목에 나타나고, 특정 상품을 선택시 그 상품의 정보들이 출력되게 하는 기능을 구현했습니다.

이중 카테고리는 상품 관리, 상품 해시태그 관리에, 삼중 카테고리는 리뷰 해시태그 관리에 사용되었습니다.

백문이 불여일견, 어떤 식으로 작동이 되는지 보여드리고, 기능에 대해 설명드리도록 하겠습니다.

리뷰 해시태그 관리 시연 들어가겠습니다.

//
시연
//

먼저 관리자 아이디로 로그인하겠습니다. 관리자 아이디는 admin으로 설정했습니다.
■ 로그아웃 한뒤 관리자 아이디 : admin, 비번 : 1234 로 로그인

관리자로 로그인하면 페이지 상단에 '관리자페이지'가 생깁니다. 여기로 접속해보겠습니다. 
■ '관리자페이지' 클릭후 접속

사이드메뉴에 상품관리, 상품/리뷰 해시태그 관리가 존재합니다.
리뷰 해시태그 관리를 확인해보겠습니다. 
■ 사이드메뉴에 리뷰 해시태그 관리 클릭

총 3개의 <select> 태그로 이루어진 삼중 카테고리 형식을 보실 수 있습니다.
최상단 카테고리에 여러 상품 카테고리가 존재하고, 하위에 해당하는 상품들이 출력됩니다.
■ 최상단 카테고리에 홍차부터 녹차까지만 클릭 후, 2번째 카테고리 클릭해서 상품들
쫙 뜨는것만 보여주기  

여기서 홍차의 잉글리시 브렉퍼스트 티의 리뷰 해시태그를 삭제해보겠습니다. 
각 출력된 해시태그 데이터 버튼을 누르면, 삭제 버튼이 출력되는 것을 확인하실 수 있습니다.
■ 홍차 - 잉글리시 브렉퍼스트 티 - 이거 맞음 ??? - 존맛 버튼 눌러서 삭제 ★★ 저장 버튼 XXXXXXXX

중요한 것은 여기서 저장 버튼을 누르지 않는다면 삭제한 내역이 저장되지 않습니다. 꼭 저장 버튼을 눌러야 삭제가 됩니다
■ ★★ 여기서 저장 버튼 누르기

이제 사용자 홈페이지에 가서 해당 후기의 해시태그가 잘 삭제됬는지 확인해 보도록 하겠습니다.
티 후기에서 잉글리시 브렉퍼스트 티를 검색해보겠습니다.
■ 메인으로 돌아가기 - var茶 홈페이지 이동 - 티 후기 - '잉글' 검색 - 리뷰 클릭해서 해시태그 보여주기 (존맛 삭제 확인)

아주 잘 삭제된것을 확인할 수 있습니다. 이상 시연을 마치고, 기능 설명을 시작하겠습니다. 
■ PPT로 돌아가기 

// 다중 카테고리 요약문 설명

앞서 보여드린대로, 다중 카테고리는 상위 항목을 선택하면 해당하는 하위 항목 출력 및 선택 기능을 구현한 기능입니다.
목적에 따라 카테고리 항목 갯수를 조절이 가능하다는 이점을 지니고 있습니다.

기존의 JSTL 문법인 c:forEach를 사용하여 직접 상품 목록리스트를 출력해도 작업 자체엔 문제가 없으나, 데이터가 많아질수록
필연적으로 출력값이 늘어납니다. 이에 따라 가독성이 하락되고, 유지보수가 불리한 결과를 초래할 수 있습니다.

현재는 비동기 처리를 통해 직관적인 관리자 UI/UX를 구현해서, 효율적인 관리 작업이 가능합니다.


----[페이지 넘김]----

최상위 카테고리 항목, 즉 상품 카테고리를 구현한 jQuery문입니다.

Controller에서 받아온 JSON 데이터를 최상위 카테고리에 출력되게 합니다. 

또한 조건식을 작성하여 카테고리에 상품이 없을 경우, 빈 데이터가 전송되는 오류 방지 및 직관적인 UI/UX를 위해 항목이 바뀔때마다
리뷰 해시태그 출력창이 초기화되도록 설정했습니다.

눈여겨 볼것은 JSON 데이터 배열의 첫번째 상품에 대한 추가 로직입니다.
해당 로직을 작성함으로써 카테고리 선택시 바로 첫번째 상품이 하위 옵션에 출력되어 관리자 작업의 효율성을 높였습니다. 


----[페이지 넘김]----

2번째 카테고리 항목 (상품 목록) 구현 jQuery 문입니다.
상품 목록에서 상품을 선택 후 '리뷰 조회' 버튼을 누르면 리뷰가 출력되는 로직입니다.
해당 버튼을 누름으로써 리뷰가 존재하지 않는다면 alert창을 띄워서 관리자에게 혼동을 주지 않습니다.
Controller에서 받아온 리뷰 목록에 대한 JSON 데이터를 상품을 선택하는 <option>에 .attr()로 value 값을 설정해준뒤, 리뷰 선택 <select>
에 값을 넣어줍니다.


----[페이지 넘김]----

3번째 카테고리 항목 (리뷰 목록) 구현 jQuery 문입니다.
리뷰 목록에서 하나를 선택한뒤, 리뷰 해시태그 조회 버튼을 누르면 사용자가 작성한 리뷰의 해시태그가 출력됩니다.
일부로 해시태그 데이터를 보시는 바와 같이 <input type="button"> 형식으로 만들어서 관리자가 해시태그 버튼을 누르면 삭제 버튼이 토글형식으로
나오게 구현했습니다.
또한 해당 상품의 해시태그가 존재하지 않을 경우, 해시태그가 존재하지 않는다는 문구와 함께 CSS 작업으로 저장 버튼을 숨김으로써 데이터 오전송 등의 오류를 방지했습니다.

----[페이지 넘김]----

삼중 카테고리가 구현이 가능케 한 Controller에 대해서 설명드리겠습니다.
categoryNum을 이용하여 출력된 차 상품목록들을 JSON 타입으로 변환하기 위해 GSON 라이브러리를 사용했습니다.
JSON 객체에 차 상품번호 및 차 상품명을 추가하여 gson.toJson을 통해 추가된
JSON 데이터들을 문자열 형태로 반환합니다.
(teaproducts)가 TeaVO 객체이므로 teaNum, teaName 외의 다른 getter,setter화된 멤버변수 역시 반환하기 때문에, 상품 관리 기능에서
차 상품 번호와 상품명을 비롯한 차의 가격 및 재고의 상품 역시 모두 출력됩니다.

----[페이지 넘김]----

상품 선택시 후기 반환 Controller, 후기 선택시 해시태그 반환 Controller 역시 아까 말씀드린 최상위 카테고리 로직이랑 구조가 거의 동일합니다.
어떤 값을 JSON 객체에 추가하는 지에 대한 차이점만 존재합니다.

----[페이지 넘김]----

코드 시연에서 보여드렸듯, 리뷰 해시태그 데이터 버튼을 누르면 삭제 버튼이 뜨는 것을 확인할 수 있습니다.
리뷰 해시태그는 사용자가 주체이므로 관리자는 삭제만 가능하게 구현했습니다.


이어서 회원가입 유효성 기능에 대해서 발표하겠습니다.

================================================================================================================================================================================================================================================================================================
[[ 준현 ]]

- 유효성 검사 기능

안녕하세요 회원가입 유효성 검사 기능 발표를 맡게 된 박준현입니다.
저는 중간 프로젝트 개선사항이었던 "회원가입 유효성" 부분을 정규식을 추가함으로써 해결하였습니다

먼저 회원가입 페이지에서 사용자가 회원가입 할 아이디를 입력할 때 마다 checkInputId()라는 아이디 검사 함수를 호출합니다.
——> 다음 페이지

이때 입력한 값이 정규 표현식에 만족하지 않으면 실패 안내 메세지를 출력합니다.
——> 다음 페이지

입력한 값이 정규 표현식에 만족한다면 중복검사를 하기 위해 checkId.do로 ajax 요청을합니다.
이후 중복된 아이디가 있는 경우 실패 안내 메세지를 출력하며
중복된 아이디가 없는 경우 성공 안내 메세지를 출력합니다.
——> 다음 페이지

checkId.do 요청의 컨트롤러 메서드에 진입할 때 
view단에서 ajax 요청을 보낸 파라미터값을 @RequestParam 어노테이션을 사용하여 매개변수에 저장합니다.
그리고 받은 파라미터값으로 memberVO객체의 memberId를 설정합니다.
이후 selectOne 메서드를 호출하여 이미 회원이 존재하는지 확인합니다. 
회원이 존재하지 않는 경우 0이라는 문자열을 반환하고 
회원이 존재하는 경우 1이라는 문자열을 반환합니다.
——> 다음 페이지

가입하기 버튼을 누르면 회원가입 유효성 검사 통과 여부를 확인합니다. 
각 입력 필드의 유효성을 하나씩 확인하고, 유효성 검사에 실패한 경우 해당 입력 필드에 포커스를 이동합니다. 
모든 입력 필드의 유효성 검사가 통과하면 리캡챠 유효성 검사 후 회원가입을 실행합니다.

//
시연
//

이어서 시연을 시작하겠습니다

test라는 아이디를 입력하면 아이디 정규표현식에 만족하지 않기 때문에 정규표현식 실패 안내 메세지가 출력이 됩니다.
test001 라는 아이디를 입력하면 이미 존재하는 회원이기 때문에 중복검사 실패 안내 메세지가 출력이 되고
test002 라는 아이디를 입력하면 존재하지 않는 회원이기 때문에 성공 안내 메세지가 출력됩니다.

이와 같은 과정으로 각 필드에 회원 정보를 입력하고 유효성 검사와 중복 검사가 실시됩니다.
마지막으로 회원가입 버튼을 누르면 리캡챠 유효성도 함께 검사되며 회원가입에 성공하는 모습을 볼 수 있습니다.

// 시연 끝

이로써 사용자가 올바른 정보를 제공하도록 보장하고, 
데이터베이스 또는 사용자 정보를 처리하는 상황에서 오류를 방지할 수 있습니다.

- 특장점

저희 팀 프로젝트의 특장점은 총 다섯가지가 있습니다

첫 번째로, 상품과 후기 해시태그 테이블을 분리하여 관리하였습니다. 
이를 통해 코드의 유지와 확장성을 높일 수 있었습니다.

두 번째로, 사용자가 직접 후기 해시태그를 입력하도록 하였습니다. 
이로써 데이터의 다양성과 사용자 참여를 촉진하였습니다

세 번째로, DB에 이미 존재하는 해시태그를 활용하는 방식으로 구현하였습니다
이로써 데이터 관리와 처리의 효율성을 증가 시키고 데이터 중복을 줄일 수 있었습니다

네 번째로, 해시태그의 출력 및 검색 기능을 구현하여 사용자들이 쉽게 정보를 파악할 수 있도록 하여 
사용자 편의성을 높여주었습니다.

마지막으로, 관리자 페이지에서 다중 카테고리를 비동기로 처리하여 
사용자의 해시태그 삭제 및 변경 등의 기능을 손쉽게 사용할 수 있도록 구현하였습니다. 

-- 오류 사항
다음으로는 개발중에 발생한 오류사항입니다.
대표적으로 3가지가 있는데

- 오류 사항 01
첫 번째 오류사항으로는 이미지가 존재했던 후기를 
등록된 이미지가 존재하지 않도록 수정할 시 NullPointerException이 발생하였습니다.

- 해결 방법
해결 방법으로 이미지를 insert하는 반복문을 이미지가 존재할 때만 insert 하도록 조건문을 추가하여 해결했습니다.

- 오류 사항 02
두 번째 오류사항으로 상품 추가 기능 실행시 해당 메서드가 2번 실행되어 
두번째 실행 시 NullPointerException이 발생하는 오류가 있었습니다
이는 Insert 즉, 추가 메서드가 실행된 후 return의 주체가 컨트롤러 메서드가 되면서 한번 더 실행되는 오류입니다.

- 해결 방법
해결 방법으로 기존 방식인 Controller에서 Controller의 이동 방식에서 
Controller에서 View로 이동하는 방식으로 바뀌도록
Sweet Alert 페이지를 활용하여 해결하였습니다.
이는 Controller 메서드가 요청의 주체가 되지 않도록 하여 
메서드가 재 호출되지 않도록 수정했습니다.

- 오류 사항 03
세 번째 오류사항으로 MySQL에서 Oracle로 데이터베이스 이관 작업 완료 후에
후기 작성 시 발생한 SQLSyntaxErrorException 문제였습니다
이는 Oracle에서 AUTO_INCREMENTS 설정 사용 불가능으로 발생한 오류입니다.

이를 해결하기 위해 후기 작성 시 INSERT 쿼리문에 서브쿼리와 NVL함수를 함께 사용함으로써 해결하였습니다. 

- 소감
이어서 프로젝트를 마무리하고 각 팀원분들이 느낀 소감을 작성하였습니다.
대표적으로 팀장인 제 소감을 읽고 마치도록 하겠습니다

[소감] --->

 최종 프로젝트를 통해 협업과 커뮤니케이션의 중요성을 느꼈습니다. 개발 과정에서 원활하고 많은 의사소통이 필요하다는 것을 깨달았습니다. 또한 팀원들과 함께 문제를 분석하고 해결책을 찾아내는 과정에서 상호간의 지식 공유로 어려운 문제에 대처하는 능력을 키울 수 있었습니다. 앞으로도 이러한 요소들에 대한 중요성을 잊지 않고 좋은 결과를 만들어내겠습니다.


- 질문

- 끝
varChar 프로젝트 발표를 들어주셔서 감사합니다
이상으로 발표를 마치겠습니다.


================================================================================================================================================================================================================================================================================================